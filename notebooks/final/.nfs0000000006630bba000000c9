{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Cross Validation for models on VGG features \n",
    "* Using the folds defined in http://ieeexplore.ieee.org.proxy.lib.uwaterloo.ca/stamp/stamp.jsp?arnumber=7312934\n",
    "* For binary and and 8 class\n",
    "* Using best hyperparameters found in VGG_features_hyperparameter search\n",
    "* Training is done using the full training set, with no validation set.\n",
    "* This was re-run on a newly created dataset compared to the hyperparameter search, because it got overly high accuracy for fold 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/rbbidart/breakHis/src\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import sys\n",
    "import glob\n",
    "import random\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from PIL import Image\n",
    "import matplotlib.pyplot as plt \n",
    "from matplotlib.pyplot import imshow\n",
    "from IPython.display import display, HTML\n",
    "from sklearn.metrics import accuracy_score\n",
    "% matplotlib inline\n",
    "\n",
    "\n",
    "# Import modules every time you run code imported using %aimport\n",
    "%load_ext autoreload\n",
    "%autoreload 1\n",
    "\n",
    "# Add the src directory for functions\n",
    "src_dir = os.path.join(os.path.dirname(os.path.dirname(os.getcwd())), 'src')\n",
    "print(src_dir)\n",
    "sys.path.append(src_dir)\n",
    "\n",
    "# import my functions:\n",
    "%aimport models\n",
    "from models import*\n",
    "%aimport functions\n",
    "from functions import*\n",
    "\n",
    "# Base Directory where data is stored\n",
    "base_data_dir = '/home/rbbidart/project/rbbidart/breakHis/'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression\n",
    "* Binary C=.1\n",
    "* 8-class C=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold  0\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "model_2 = LogisticRegression(C=.1)\n",
    "model_8 = LogisticRegression(C=1)\n",
    "cv_features(model_2, model_8, base_data_dir)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Random Forest\n",
    "* Binary 160, 3\n",
    "* 8-class 160, 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold  0\n",
      "Fold  1\n",
      "Fold  2\n",
      "Fold  3\n",
      "Fold  4\n",
      "Binary classification results:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>test_acc</th>\n",
       "      <th>train_acc</th>\n",
       "      <th>fold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.862205</td>\n",
       "      <td>1</td>\n",
       "      <td>fold1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.803226</td>\n",
       "      <td>1</td>\n",
       "      <td>fold2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.786248</td>\n",
       "      <td>1</td>\n",
       "      <td>fold3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.730659</td>\n",
       "      <td>1</td>\n",
       "      <td>fold4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.807552</td>\n",
       "      <td>1</td>\n",
       "      <td>fold5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   test_acc train_acc   fold\n",
       "0  0.862205         1  fold1\n",
       "1  0.803226         1  fold2\n",
       "2  0.786248         1  fold3\n",
       "3  0.730659         1  fold4\n",
       "4  0.807552         1  fold5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Test Accc:  0.797977890865\n",
      "Binary Classification Confusion matrix for fold 5:\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAVkAAAEmCAYAAADIhuPPAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAHIpJREFUeJzt3Xm8VWW9x/HP9yCDJIOKODBJ4BAl\nmoBGmpq3FDRR9Dpch8IGNLFB8pqWmlqWr5QySyqnKPFezUqUwtCu4ZSpICiDQyAIqJU4BIpyGH73\nj72gI5yzzz641977OXzfvdbLvZ+99np+x5NfHp611rMUEZiZWT7qql2AmVlr5pA1M8uRQ9bMLEcO\nWTOzHDlkzcxy5JA1M8uRQ9bMLEcOWTOzHDlkzcxytFW1C2hM1+22j5179K52GWb2Hj0zZ9ayiNih\nXMdr07lPxJq3S94/3n5lakQMK1f/m6MmQ3bnHr2ZMOnP1S7DclQnVbsEq4D9+nV9oZzHizXv0H7P\nk0re/52ZP+5Wzv43R02GrJlZowQk9ge0Q9bM0qK0TiU5ZM0sLR7JmpnlRR7JmpnlKrGRbFp/JJjZ\nlk0URrKlbqUcUnpF0tJsezZr6yxpiqSFkh6UtFOD/c/J2hdIOq654ztkzSwhKoxkS91KszYiembb\nHlnbucDciOgL3A5cBiCpHzAGGAgcDFwtqWOxgztkzSwtZR7JNuFoYEL2egIwMns9ArgjIlZExFLg\nMeDQYgdyyJpZWso/km0j6W+S5ko6I2vrAbwIEBHLgbaSOjRszyzJ2prkE19mlpAWX13QTdL0Bu+v\ni4jrNtpnSEQsktQXmCppbqGjjTsmGmlvthiHrJmlo+V3fC2LiMHFdoiIRdk/F0q6CxgMLAV6Am9I\n6gLUR8QqSevb1+sJ3FPs+J4uMLO0lHFOVtK2krpnr7sDw4HZwF3AqGy3UcCd2evJwMjs6oNewBDg\nvmJ9eCRrZgkp+80IOwN3SNoGqAd+HhH/l00x3CppCbAYOB4gIuZLGg/MAdYCYyNiZbEOHLJmlpa6\n8t2MEBHzgD0aaf8XhVFtY98ZB4wrtQ+HrJmlY/3NCAlxyJpZQgR1bapdRIs4ZM0sLYmtXeCQNbO0\neLrAzCwnLbuTqyY4ZM0sLR7JmpnlyCNZM7O8+MkIZmb58kjWzCwnvhnBzCxPni4wM8uXpwvMzHLk\nkayZWY48kjUzy4k8J2tmli+PZM3M8iOHrJlZPgrPUXTImpnlQ2z6UO4a55A1s4SIujqf+DIzy42n\nC8zMcuSQNTPLi+dkzczyI+SRrJlZnhyyZmY5csiameXIIWtmlhef+DIzy5dHsmZmOfHVBWZmOXPI\nmpnlKa2MdciaWULkkayZWa4csmZmOXLImpnlxFcXmJnlLa2MJa0lxhP1rbGjGTakPycPH7rJZ7+5\n+Xo+0n9blix6HoBl//w7X/yvIzlkrx5cdcl/V7pU20wXjx3NYUP6cdKwf/+OfzF+HEcfPJCjD9qL\nM08+khcXL9rw2bynZnLaiIM4YuienDRsKOvWratC1QkS1NXVlbzVgtqoopU7+sTP8IMbf71J+6uv\n/INp9/6BXrv229C29dYdOfPcixjz39+qZIn2Hh1z4qe5+sbb39U24oTTmDTtSe58YDYfP+woxl91\nGQD1q1Zxwdmf5qvfuJwpjzzDD2+8Lbm/AleTpJK3WuCQrYB99z+ATp27btJ+zfcu4syxF77rT9z3\nderM3oM+Qrv2HSpZor1H++5/4Ca/4+27dd/wH/qaNas3tN//pynsPmAggz7yMQB27tG7ZgIhCWrB\nVgMcslXy2MPTaN9haz60z+Bql2I5+tkPvsOw/Xbj9ok38KXzLwVg8cL5dNi6I2eefCQnDRvKL39+\ndZWrTEseI1lJdZL+Kumh7H1nSVMkLZT0oKSdGux7Tta+QNJxzR0795CVtJWkdZLmZ9tTkj6Wd7+1\nbHV9PT//weWcde7F1S7Fcnbm2Au5+9Hn+M9TPs8tN/wEgLVr1zDr8Ue4/JpfcMPtU7n3979l+iMP\nVLnSNLQkYFv4t4MzgOcbvD8XmBsRfYHbgcuy/vsBY4CBwMHA1ZI6FjtwpUay9RHRPyL6AxcBV1So\n35r0yj9e5sXFCxk18uMcc/BAli5eyFmnHMXihfOrXZrlQBLDR57In6dOBqD7Tj3YZ8hQtu/WnW06\ndWb/Aw/luadnV7nKdJQ7ZCV1B04Erm3QfDQwIXs9ARiZvR4B3BERKyJiKfAYcGix41djuqAj8HoV\n+q0Zu/Tqwx8fn8+k+59i0v1P0bN3X8bfMpnefftXuzQro3lPzSQiAJjyu1vZtd/uABz48cN4Zs4s\n3lyxnPpVq5j5+F/ot/uAapaalBaGbDdJ0xtsoxs55DjgQmBtg7YewIsAEbEcaCupQ8P2zJKsrUmV\nuk62naRngA7AtsB/VKjfmvD1s05jzszHeeP1VznqgA/yha+cz4gTTmt037Vr13LMQQNZ9c5KVq9e\nzf33TuGaCb+l7257Vrhqa4nzvngqs7Pf8acOGMAXvnI+Tzz6MI89PI02bdrw/t0+wAWXF+Zeu3Xf\niVM+dzafHnEwqqvjE0eMZP8DP17lnyAhLTuhtSwimjzxIenjwLqIeEjSR4r0IiAaaW92oKr1f9Lm\nRdJWwJsR0SF7fyBwIzAgItY22G80MBpgp116Dpr0gP/61JrV+Wz6FmG/fl1nFAu5lmq/427R45Qf\nlbz/wh8eWbR/Sd8EzgJWA+0pDALvAfoAp0TEHEldgPkRsYOkc4AeEXFu9v3fATdFxO+b6qPi0wUR\n8RDQjY2G2BFxXUQMjojBXbfrVumyzCwFKu+cbERcHhE9ImJXCvOu0yNiBHAXMCrbbRRwZ/Z6MjAy\nu/qgFzAEuK9YHxW/rVbSoKzfv1e6bzNLm4AK/SXoKuBWSUuAxcDxABExX9J4YA6FOdyxEbGy2IEq\nFbLtJS3KXr8NnBYR9RXq28xajfzu5IqIvwIHZq//BQxvYr9xFE6WlST3kI2INdTMvRdmlrrUpvO9\nCpeZJSW1W5AdsmaWDnkka2aWGwF1dWmlrEPWzJLikayZWY48J2tmlhfPyZqZ5UeoZh4rUyqHrJkl\nxSNZM7MceU7WzCwvnpM1M8tPYYGYtFLWIWtmSUksYx2yZpYWj2TNzHKUWMY6ZM0sIfJI1swsNxV8\nMkLZOGTNLCH5PRkhLw5ZM0tKYhnrkDWztHgka2aWF9/xZWaWH9/xZWaWM4esmVmOEstYh6yZpcUj\nWTOznEjy02rNzPKU2EDWIWtmaalLLGUdsmaWlMQy1iFrZumQV+EyM8tXYue9HLJmlhaPZM3McpRY\nxjYdspK2K/bFiHit/OWYmTVNgEgrZYuNZO8HAhr9iQIYmEtFZmZFtJo52YjYq5KFmJk1S+k9GaGu\nuR0kdZb0XUk3Zu/3lHRs/qWZmW1KKn2rBc2GLDABeB7YPXu/CLgkn3LMzJomCnd8lbrVglJCtldE\n3ACsAYiId4A2uVZlZtaE1jiSrZfUicLJLiTtC7yVa1VmZk1QNi9bylbCseokPSZpkaQXJF2lgs6S\npkhaKOlBSTs1+M45WfsCScc110cp18l+E7gX6C3pLmAQcEIJ3zMzK6tyj1AjYp2kERHxd0kdgPuA\nw4GPAnMj4ghJXwYuA0ZL6geMoXB1VRfgEUl3R8TKpvpoNmQjYpqkw4AhFKZEHo+If73nn87MbDOU\ne641Iv6+/tD8+2/3RwMnZ68nAAuA0cAI4I6IWAGskPQYcCjw+ybrLbGOAcC+wIeBD7SgfjOzslIL\ntpKPKc0FXgVmA1OBHsCLABGxHGibjXQ3tGeWZG1NKuUSrkuBHwJrs+2Hkr7VgvrNzMpCQJs6lbwB\n3SRNb7CNbuy4EfFBYGegH7A/m2a0aPzmrGYztJQ52WOBfSNiNYCknwCzgEtL+K6ZWfm0/GaEZREx\nuJQdI+INSVOBTwFLgZ7AG5K6APURsUrS+vb1egL3FDtuKdMFS4EODd5vDbxQStFmZuVWzku4JHWX\n1Cd73ZXCXOzTwF3AqGy3UcCd2evJwMjs6oNeFM5V3Vesj2ILxFxJYXi8Epgj6e7s/RHAA82Xb2ZW\nfmW+rbYr8BtJ21O4F+AW4H+AzsCtkpYAi4HjASJivqTxwBwK06dji11ZAMWnC2Zl/3wS+F2D9oc2\n4wcxM3vPCnd8le94EfEcjS929S9geBPfGQeMK7WPYgvE3FLqQczMKiW1BWKaPfGVzVdcSuEyrg1z\nsxHhpQ7NrOLSitjSTnz9EpgIrKIwfL4euCPPoszMGiO1zgViOkXEnwAi4sWI+DHQO9+yzMwal9oC\nMaVcJ1uf/fNlSScBzwB75FeSmVnTWt2cLHCBpM7AucAVwKeBC3KtysysCYllbGkLxGQvl/PvBRPM\nzCpO1M5ca6mK3YwwmWwN2cZExIhcKjIza0oNzbWWqthI9pJKFbGxju3asHefrtXq3ipg2yFnV7sE\nS1SrmZONiBmVLMTMrBSlrs9aK0o58WVmVhNEKxrJmpnVonKuXVAJJY28JXWR5Ntozazq6lT6VgtK\neTLCCcD9FJYAQ9I+2bKHZmYVVbiTq3xPq62EUkay51N4cuMygIiYBfTJsygzs6a0qSt9qwWlzMmu\njoiV6/9UkNSG9BbCMbNWoLCebFrxU0rWz5J0JtBO0r4UVuT6U75lmZk1rq4FWy0opY6vADsA64Br\ngHnA1/IsysysKa1uFa6IeAf4draZmVWNamid2FKV8mSE22lkDYOIOCGXiszMikgsY0s68XV1g9ft\ngE8AHfMpx8ysuFq5/rVUpUwXPLxR058l+SGLZlZxKV5d0OLbaiW9H+ifQy1mZs1KLGNLmpN9mX/P\nya4DFgPfzLMoM7NG1dDtsqUqGrKS6oBhEfFkheoxMytKid0LVfQ62YhYB1xaoVrMzIoqzMm2sgVi\ngKclHZh7JWZmJWg1ISupd/bysxSuKHhd0kuSXpb0UmXKMzN7t9RW4So2J/sQ0DsidqxUMWZmxayf\nLkhJsZBN7Ecxs1avhtYkKFWxkO0i6ftNfRgR5+VQj5lZUa3pZoS1wIuVKsTMrDmtbbpgRUT8qGKV\nmJk1S7RpRSPZtH4SM2v1Co8Er3YVLVMsZPtVrAozs1LU0PWvpWoyZCOivpKFmJmVojWd+DIzqymt\nbbrAzKzmeCRrZpajxDLWIWtm6RC186jvUqVWr5ltyVTeBWIk9ZL0J0lLJS2QdHbW3lnSFEkLJT0o\naacG3zkna18g6bjm+nDImllS1IKtRJcBvYChwPmSBgDnAnMjoi9we7YPkvoBY4CBwMHA1ZKKPljW\nIWtmyVj/IMVSt+ZExJKIeCAK/gk8C+wCHA1MyHabAIzMXo8A7oiIFRGxFHgMOLRYH56TNbOktPC8\nVzdJ0xu8vy4irmv0uNLuwO7Ao0APsrVbImK5pLaSOmTtSxt8bUnW1iSHrJklpYVXFyyLiMHNH1Nd\nKUwLjI6IFdp0QlcUHii7cXuzswGeLjCzhJR+0qvUJyNkI9Q7gR9FxN1Z81KgZ/Z5F6A+IlY1bM/0\npJnVCh2yZpaM9Zdwlbo1ezypDXAb8MeIuKnBR3cBo7LXoyiEMMBkYGR29UEvYAhwX7E+PF1gZkkp\n87O7DqZwMmuQpDFZ25eAq4BbJS0BFgPHA0TEfEnjgTkU1tweGxEri3XgkDWzpJQzYiPiviKHHN7E\nd8YB40rtwyFrZulQ2UeyuXPImlkyBK3qyQhmZjUnrYh1yJpZYhIbyDpkzSwdhUu40kpZh6yZJcUj\nWTOz3Ah5JGtmlh+PZM3McuI5WTOzPMkjWTOzXDlkzcxy5BNfZmY5KTx+ptpVtIxDtsKWLFnCGZ8/\nnWeffYb27dvzpS+fwxfHnM2F3zifX9/2vwDsO2gwP7/+Jrp06VLlaq0lFt/3Perr1wDw1tv17D3y\n23z7yyM4YVhhYf4n5i3mjEsmsvzNdzhkv9353jkj6dZ1G15fvpKvff83PDjjb9UsPxmpjWS9aHcV\nfOPCi5m/cAnTHnyEq668gqfnzWPwkP2Y+dQ8np2/iO23257vX/HdapdpLbR2bdB/2EX0H3YRe4/8\nNgDT57zAh4/9DnsccTGvvvEW5332cABWvl3PqV+/id2GX8RXv3cbv7ri9GqWnhSp9K0WeCRbYb16\n9aJXr14AdO/end1334OXX36JY0Yeu2GfAw78GPfeM7VaJVoZ3XnfkxtePzxzPp8c+gEAHpu9aEP7\no7MX0el97WnXdivqV6+pdInJ8UjWSva3557jb397jiH77b+hLSKYePMvGX7kp6pYmW2ONm3E7Dsv\nZsZvvsnnjjtgk89PPWp/7n5w7ibtJw4fzMNPLHDAlmD9nGypWy3IbSQraStgNTAhIk7P2rYG/gn8\nISJOyqvvFLzxxhucctLxXPvT6+jUqdOG9ksuvpAdd9yJE07cov/1JOnAU65k8cuv0WeX7Zk8fgxP\nL3iZv8x6HoBLxhzFP5Yt5/apM971nb336Mn5nx/GkWf+uBolJyi922rzHskuB/aV1C57/yng+Zz7\nrHnvvPMOxx97NGO+9BUOH/bvJ1z8bPy1TH/8MX5+w01Fvm21avHLrwHwwkuv8of7Z7PvgN4AnHHC\nQQz+UB/OuOSWd+3ft2c3fnXF6Zx63o0s+fvrFa83SS2Yj62VOdm8QzaAe4DDs/cnUngy5BZr7dq1\nnHbyiRx2+DA+c/pnN7T/+rZbmXjzL7ntN3fQrl27IkewWtS109bssO02AOyw7TYcdsAA5sx/ieMP\nH8SpR+3HiWOvY/WatRv233H7Tvz2R2dw9ndu5annij5R2hpY/2SEUrdaUIkTX7cCYyVNA3oBE4GB\nG+8kaTQwGqBX794VKKs6Hnzgfn4/+S6eeGIGP/vptQD84Oof880LzmPlW2+x94f2BAonv3418X+r\nWaq1wE47dOG2cV9gm47tqV+9hht/+zDTHnuO56ZcRset2/PkHRcB8PDMBXzmggmMPuEg+vboxi8u\n//SGYxxwyvf5x6srqvUjJKM2orN0ioh8DlyYk10WEV0lzQR+CuwAzAVOKjYnO2jQ4Hj40em51GW1\nYdshZ1e7BKuAd2ZdOyMiBpfreB/Y68Pxi0l/Lnn/of23LWv/m6NSl3BNAb4H7A98qEJ9mlkrlNqJ\nr0qF7PXAixExX5JD1sw2W41MtZasIiEbEYuA8ZXoy8xat8QyNr+QjYg1QNdG2icBk/Lq18xaucRS\n1rfVmlkyhOdkzczyU0M3GZTKIWtmSUksYx2yZpaYxFLWIWtmCUlvgRiHrJklxXOyZmY5EcnNFjhk\nzSwxiaWsQ9bMkuI5WTOzHHlO1swsR4llrEPWzBKS4Jkvh6yZJaPwtNq0UtYha2ZJSSti83+QoplZ\neakFW3OHkiZKekXSnAZtnSVNkbRQ0oOSdmrw2TlZ+wJJx5VSrkPWzJKiFvyvBNcDR2zUdi4wNyL6\nArcDlwFI6geMofAg2IOBqyV1bK4Dh6yZJUUqfWtORNwPvL5R89HAhOz1BGBk9noEcEdErIiIpcBj\nwKHN9eE5WTNLSgvnZLtJavjo6+si4rpmvtMDeBEgIpZLaiupQ9a+tMF+S7K2ohyyZpaWlqXsss14\nJPjGPQiIRtpLmgnwdIGZJWP942fKOCfbmKVATwBJXYD6iFjVsD3Tk2zEW4xD1szS0YL52PdwOe1d\nwKjs9Sjgzuz1ZGBkdvVBL2AIcF9zB/N0gZklpZzXyUr6HTCUwtztUuBbwFXArZKWAIuB4wEiYr6k\n8cAcYC0wNiJWNteHQ9bM0lLGlI2IY5v4aHgT+48DxrWkD4esmSXEj58xM8tVYksXOGTNLB0JLsLl\nkDWzxCSWsg5ZM0uK52TNzHLkOVkzsxwllrEOWTNLiECJDWUdsmaWDOHpAjOzXCWWsQ5ZM0uLR7Jm\nZjnyJVxmZnlKK2MdsmaWlsQy1iFrZul4j4txV4VD1syS4jlZM7M8pZWxDlkzS0tiGeuQNbO0eE7W\nzCw3fvyMmVluUly7oK7aBZiZtWYeyZpZUlIbyTpkzSwpnpM1M8uL7/gyM8tPiie+HLJmlhRPF5iZ\n5cgjWTOzHCWWsQ5ZM0tMYinrkDWzpHhO1swsJyleXaCIqHYNm5D0CvBCteuosG7AsmoXYbnaEn/H\nfSJih3IdTNIfKfx7LNWyiBhWrv43R02G7JZI0vSIGFztOiw//h1vmbxAjJlZjhyyZmY5csjWjuuq\nXYDlzr/jLZDnZM3McuSRrJlZjhyyZmY5cshWkTLVrsPyJek/JJ1U7TqsOnzHV5VIOgI4Elgn6bsR\n8XK1a7Lyyv4AbQfcAGwjqW1E3FzlsqzCPJKtgixgfwTMBdoCY6tbkeUhClYBXwf+CBwg6YtVLssq\nzCFbYZIOBe4EjoqI8cD9QHdJX5G0e3Wrs3KR1L3B2wUUbgV9CNhV0hnVqcqqwSFbea8DbYBds/cX\nAyuBvsB9kgZWqS4rE0mfAJ6UdIWkHSNiBvAr4JPAn4HBkj5X1SKtYjwnW2ERMVPSAcA9ktYBZ0XE\nLQDZObDzJZ0SvoA5Za8B2wBfAF6Q9EHgXmAO8ATwL+CrktZExC+rV6ZVgkO2CiLiEUkHAdN49xLE\nL+HfSfIi4glJQ4GpwM7AzcA1wAAKq0L9IjsptrCKZVqF+D/oKslGtMOBqZLWUBjdfAE41qPY9EXE\nHEnHAHcD0yNif0mHACuyz/9SzfqscnxbbZVJ+gjwF+At4KMRMbvKJVkZZSPaycC5ETGhyuVYFThk\na4CkvYD6iHi22rVY+UnaD/grcLrnYLc8DlmzCpA0CFgREc9VuxarLIesmVmOfJ2smVmOHLJmZjly\nyJqZ5cgha2aWI4esmVmOHLJbAElbSVonab6k5yXdKWnb93C8wZImZa+/Kun8IvvuIunkzejjJ9kd\nUxu3T8pu4Cj23WckdW1BX8dI+llLazQrhUN2y1EfEf2BfhRu7Tyn4YfZQxo25/8PvwYmFvl8F6DF\nIWvWWjhktzDZugj/B/SXtJOkpyVdS+Ee++6SDpb0sKQZku6StB2ApEMkzZH0AHBqg0OesP69pD6S\n/ijpKUkzs9WnLgaGSpom6ewszL8jabqkJyV9bf2BJF2Z9TEF6NXczyJpQlbnHEnf2OjjCyT9RdLj\nkvbM9u8g6WdZ26zNGWGbtZRDdgsjqR1wFDAva9oNuCYihlFYP+FK4MiIGATcAXxD0lbATcCJEXEQ\nsF0Th78JmBgRA4H9gReAy4BHIuKQiPgJ8F/A1hExGBgEDJe0l6TDsu/sA4wCDijhxxmb1bkPcOhG\ni56/HhEfBS4Bxq/fH5gXEUOAjwLnSepWQj9mm82rcG052ktaBKyjsEL/1RTWPF3QYM2EQUBvYFK2\ntm1b4HkKC4y/FhFzs/1uBsY0PLiktsDeETERICLqgfpGnhN5GLCPpGnZ+22B9wNDgF9HxBrgn5Km\nlvAz/aek04CgsOj5AGD9bav/k9XxB0k3ZlMhhwEdJB2b7dMW6FNCP2abzSG75VgVEbs2bJC0DfB2\nwyZgVjaqbbhff2B1g6aGr1tKwBURcetGfQxpSR9ZTWcBB0bEm9mJqw4NdmnsfnEBX42Iv250rGan\nJsw2l6cLrKEZwMAs8JC0taQBwCJgO0k7ZvsN3/iLEbEaeCIbWSKpvaROFE6ydW6w61TgbEnvy/br\nJ6kL8ABweNbWATikmVq7Ai9lAdtx/XcbOCU71qeAuRGxLuv7a9n0B5L2kdSmmX7M3hOPZG2DiFgu\n6XjgJ1lABnBpRMxT4eF/t2dTDiuaOMTngOslXUBhJHoy8DTwpqQnKczXXimpHzA9m0pYBhwXEfdI\n+qSkP1B4Dtq8xrvYYAbwWnYp2ZvAzI0+byfpUQrPU1t/ou4qCnPOs7O+lwBHNP9vxmzzeRUuM7Mc\nebrAzCxHDlkzsxw5ZM3McuSQNTPLkUPWzCxHDlkzsxw5ZM3McvT/EEr22+8RfrYAAAAASUVORK5C\nYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x2b22776d86a0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8-Class Classification Results:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>test_acc</th>\n",
       "      <th>train_acc</th>\n",
       "      <th>fold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.489501</td>\n",
       "      <td>1</td>\n",
       "      <td>fold1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.395161</td>\n",
       "      <td>1</td>\n",
       "      <td>fold2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.437967</td>\n",
       "      <td>1</td>\n",
       "      <td>fold3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.432665</td>\n",
       "      <td>1</td>\n",
       "      <td>fold4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.46894</td>\n",
       "      <td>1</td>\n",
       "      <td>fold5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   test_acc train_acc   fold\n",
       "0  0.489501         1  fold1\n",
       "1  0.395161         1  fold2\n",
       "2  0.437967         1  fold3\n",
       "3  0.432665         1  fold4\n",
       "4   0.46894         1  fold5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Test Accc:  0.444846958178\n",
      "8-Class Classification Confusion matrix for fold 5:\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x2b22784ad518>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "model_2 = RandomForestClassifier(n_estimators=160, min_samples_split=3)\n",
    "model_8 = RandomForestClassifier(n_estimators=160, min_samples_split=3)\n",
    "cv_features(model_2, model_8, base_data_dir)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## XGBoost\n",
    "* Binary: n_estimators=200\tmax_depth=8\tlearning_rate=0.3\treg_lambda=2\n",
    "* 8-class: n_estimators=250 max_depth=9 learning_rate=0.3\treg_lambda=2 (guess)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "No module named 'xgboost'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-3-89dfeb9e0839>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mxgboost\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mXGBClassifier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mmodel_2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mXGBClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_estimators\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m200\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_depth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlearning_rate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreg_lambda\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mmodel_8\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mXGBClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_estimators\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m200\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_depth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlearning_rate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreg_lambda\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mcv_features\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel_8\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbase_data_dir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mImportError\u001b[0m: No module named 'xgboost'"
     ]
    }
   ],
   "source": [
    "from xgboost import XGBClassifier\n",
    "\n",
    "model_2 = XGBClassifier(n_estimators=200, max_depth=8, learning_rate=0.3, reg_lambda=2)\n",
    "model_8 = XGBClassifier(n_estimators=200, max_depth=8, learning_rate=0.3, reg_lambda=2)\n",
    "cv_features(model_2, model_8, base_data_dir)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## KNN\n",
    "* 9 neighbours"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "model_2 = KNeighborsClassifier(n_neighbors=9)\n",
    "model_8 = KNeighborsClassifier(n_neighbors=9)\n",
    "cv_features(model_2, model_8, base_data_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
